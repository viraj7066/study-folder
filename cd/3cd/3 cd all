1. lexer.l (Flex File)


%{
#include "parser.tab.h"  // Ensure this is included to define tokens
#include <stdio.h>
#include <stdlib.h>
extern int yylval; // Declare yylval for the parser
%}

%%
[0-9]+ {
    yylval = atoi(yytext);
    return NUMBER;
}
[\t]+ ; // Ignore whitespace
\n { return 0; } // Handle new lines
. { return yytext[0]; } // Return single characters
%%

int yywrap() {
    return 1;
}








2. parser.y (Bison File)

%{
#include <stdio.h>
#include <stdlib.h>

int yylex(); // Declare the yylex function
int flag = 0; // To track if the expression is valid
void yyerror(const char *s);
%}

%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%%
// Grammar rules
ArithmeticExpression: E {
    printf("\nResult = %d\n", $1);
    return 0;
}
;

E: E '+' E { $$ = $1 + $3; }
 | E '-' E { $$ = $1 - $3; }
 | E '*' E { $$ = $1 * $3; }
 | E '/' E { $$ = $1 / $3; }
 | E '%' E { $$ = $1 % $3; }
 | '(' E ')' { $$ = $2; }
 | NUMBER { $$ = $1; }
 ;

%%

// Driver code
int main() {
    printf("Enter any arithmetic expression:\n");
    yyparse();
    if (flag == 0)
        printf("\nEntered arithmetic expression is Valid\n\n");
    return 0;
}

void yyerror(const char *s) {
    printf("\nEntered arithmetic expression is Invalid: %s\n\n", s);
    flag = 1;
}



enter command 

1. sudo apt-get install bison flex
2. bison -d parser.y
3. lex lexer.l 
4. gcc -o calc parser.tab.c lex.yy.c -lfl
5. ./calc

output
Enter any arithmetic expression:
2+5-1*4/3

Result = 6

Entered arithmetic expression is Valid























