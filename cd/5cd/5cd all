create lexer.l 


%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"  // Include Yacc header for token definitions

FILE *fpOut;
%}

%%
[a-zA-Z_][a-zA-Z0-9_]* {  // Variable names
    strcpy(yylval.vname, yytext);
    return NAME;
}
[0-9]+           {  // Numbers
    yylval.num = atoi(yytext);
    return NUMBER;
}
[ \t]+           ;  // Ignore whitespace
\n               { return '\n'; }
"="              { return '='; }
"+"              { return '+'; }
"-"              { return '-'; }
"*"              { return '*'; }
"/"              { return '/'; }
.                { return yytext[0]; }  // Return single characters
%%

// Declare the input file
FILE *yyin;

int main() {
    FILE *fpInput;
    fpInput = fopen("input.txt", "r");
    fpOut = fopen("output.asm", "w");
    yyin = fpInput;
    yyparse();
    fclose(fpInput);
    fclose(fpOut);
    return 0;
}





create parser.y


%{
#include <stdio.h>
#include <stdlib.h>

extern int yylex();  // Declare yylex
void yyerror(const char *s); // Declare yyerror
FILE *fpOut;  // Declare fpOut globally

%}

%union {
    char vname[32];  // Variable names
    int num;         // Numeric values
}

%token <vname> NAME
%token <num> NUMBER
%type <vname> expression

%left '+' '-'
%left '*' '/'

%%
input: line '\n' input
     | '\n' input
     | ;

line: NAME '=' expression {
    fprintf(fpOut, "MOV %s, AX\n", $1);
}
;

expression: expression '+' expression {
    fprintf(fpOut, "ADD AX, %s\n", $3);
}
| expression '-' expression {
    fprintf(fpOut, "SUB AX, %s\n", $3);
}
| expression '*' expression {
    fprintf(fpOut, "MUL AX, %s\n", $3);
}
| expression '/' expression {
    fprintf(fpOut, "DIV AX, %s\n", $3);
}
| NAME {
    fprintf(fpOut, "MOV AX, %s\n", $1);
}
| NUMBER {
    fprintf(fpOut, "MOV AX, %d\n", $1);
}
;

%%

// Error handling function
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}
 
 
 
 
create input.txt in same folder

a = 10
b = 5
c = a + b
d = c * 3
e = d - 2
 
 
 
 commands for terminal 
 
 1.yacc -d parser.y
 2.lex lexer.l
 3.gcc lex.yy.c y.tab.c -o my_compiler -lfl
 4. ./my_compiler
 5. ls -l output.asm  # Check permissions
 6. sudo apt install gedit
 7. gedit output.asm


